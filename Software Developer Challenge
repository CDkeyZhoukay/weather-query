Challenge 1:

Read through the rest of the assignment, decide which technologies to use and explain why you chose what you chose. As a reminder we at Paytm are dealing with millions of concurrent users, just sayin’ :)

Bill K Zhou:
I would like to use Node.js + MongoDB to build this application. The reason is Node.js is built to handle asynchronous I/O from the ground up. so it can optimizes an application's throughput and scalability. While modern apps require more diversity and scalability, MongoDB which is Non-relational database fits the trend. At last, they are lightweight and developer friendly tools which good for working on this assignment.

Challenge 2:

Create a deployable “Hello World” Server exposing simple REST “Hello World” API. It is going to be a base for your application for this assignment.

Bill K Zhou:
The server of app 'weather query' can be deployed to windows/Linux/OSX.

Challenge 3:

Pick one of the available online API’s such as Twitter (https://dev.twitter.com/overview/api), LCBO (https://lcboapi.com/) or Weather (https://openweathermap.org/api), create and implement a flow involving that API and user of your application. For example, your application might have following UI:

Bill K Zhou:
The app 'weather query' make use of openweathermap API to get the weather information of one city and display to user.

Challenge 4:

Make your application secure and personalized by making people to have to sign-up / login. Bonus points, if users will be able to reset their passwords. 

Bill K Zhou:
The app 'weather query' have signup and login function, the password encryped with Blowfish-based Scheme and users are able to change their information after signup. Of course, password can be reset by email after fill in your credentials.

Challenge 5:
Make your application persistent. Whatever functionality your application has, after restart, make it possible to view a history of user activity or anything else you deem necessary.

Bill K Zhou:
User session will be stored in MongoDB, so no matter how the app server restart or DB server down and up, user will not lost the login status. 

Challenge 6:

Test your application.

Bill K Zhou:
I have tested all the functionalities of the app and the test result can be found in the 'weather-query test.docx'.

Challenge 7:

Let us know how we can use it. You could either provide us with a zipped file containing your solution or a link to your Github repository containing one.

Bill K Zhou:
Please check the 'README.md' for the detail information about how to install the package and run the server.

Bonus (optional):

Add an “I’m feeling lucky button” that does a random search, but make sure that same result is not returned twice or that you don’t return a page that the user already viewed. Use the user stored history to do so. Since going through the history can potentially be costly, suggest and optionally implement optimization mechanism to avoid hitting the storage every time.

Bill K Zhou:
Unfortunately, I don't have enough time to work out this solution. My idea would be load the history to memory when user login and compare the random search if it is existing, add new one to the list then update it back to DB before user logout. 

Thanks for your time!
